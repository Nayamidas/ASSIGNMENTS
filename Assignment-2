---

### **Question 1: Check if a Number is Prime**

```python
def prime(n, i=2):
    if n <= 2:
        return True if n == 2 else False
    if n % i == 0:
        return False
    if i * i > n:
        return True
    return prime(n, i + 1)

num = int(input("Enter any number: "))
if prime(num):
    print("Prime number")
else:
    print("Not a prime number")
```

---

### **Question 2: Calculate the Area of a Rectangle**

```python
def area_rect(length, breadth):
    return length * breadth

print("Area of rectangle =", area_rect(5, 6))
```

---

### **Question 3: Find the Maximum of Three Numbers**

```python
def max_num(a, b, c):
    return max(a, b, c)

a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
c = int(input("Enter third number: "))
print("Largest number =", max_num(a, b, c))
```

---

### **Question 4: Reverse a String**

```python
def rev_str(s):
    return s[::-1]

s = input("Enter any string: ")
print("Reverse of string:", rev_str(s))
```

---

### **Question 5: Count the Number of Vowels in a String**

```python
def count_vowel(s):
    vowels = 'AEIOUaeiou'
    count = sum(1 for ch in s if ch in vowels)
    return count

s = input("Enter any string: ")
print("Number of vowels =", count_vowel(s))
```

---

### **Question 6: Check if a String is a Palindrome**

```python
def is_palindrome(s):
    return s == s[::-1]

s = input("Enter any string: ")
print("Is palindrome:", is_palindrome(s))
```

---

### **Question 7: Calculate the Sum of a List of Numbers**

```python
def sum_list(li):
    return sum(li)

print("Sum =", sum_list([10, 20, 30, 40, 50]))
```

---

### **Question 8: Return the Fibonacci Series**

```python
def fibonacci(n):
    a, b = 0, 1
    for _ in range(n):
        print(a, end=' ')
        a, b = b, a + b

n = int(input("Enter range: "))
fibonacci(n)
```

---

### **Question 9: Convert Celsius to Fahrenheit**

```python
def cel_to_far(temp):
    return (temp * 9/5) + 32

print("Temperature in Fahrenheit =", cel_to_far(103.6))
```

---

### **Question 10: Find the Minimum Number of a List**

```python
def min_num(a, b, c):
    return min(a, b, c)

a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
c = int(input("Enter third number: "))
print("Smallest number =", min_num(a, b, c))
```

---

### **Question 11: Count How Many Times a Character Appears in a String**

```python
def char_freq(s):
    counted = []
    for char in s:
        if char not in counted:
            count = s.count(char)
            print(f"Character {char} occurs {count} times.")
            counted.append(char)

s = input("Enter a string: ")
char_freq(s)
```

---

### **Question 12: Check if a Number is Perfect**

```python
def perfect(num):
    return sum(i for i in range(1, num) if num % i == 0) == num

n = int(input("Enter a number: "))
if perfect(n):
    print(f"{n} is a perfect number.")
else:
    print(f"{n} is not a perfect number.")
```

---

### **Question 13: Find the Sum of Digits of a Number**

```python
def sum_of_digit(num):
    return sum(int(digit) for digit in str(num))

num = int(input("Enter any number: "))
print(f"Sum of digits of {num} = {sum_of_digit(num)}")
```

---

### **Question 14: Return a Dictionary of Character Frequencies**

```python
def char_freq(s):
    freq = {}
    for char in s:
        freq[char] = freq.get(char, 0) + 1
    return freq

input_str = input("Enter a string: ")
result = char_freq(input_str)
print(result)
```

---

### **Question 15: Return Average of a List of Numbers**

```python
def avg(li):
    return sum(li) / len(li)

li = [10, 20, 30, 40, 50]
print("Average =", avg(li))
```

---

### **Question 16: Print Multiplication Table**

```python
def table(num):
    for i in range(1, 11):
        print(f"{num} * {i} = {num * i}")

num = int(input("Enter any number: "))
table(num)
```

---

### **Question 17: Reverse a List**

```python
def rev_list(li):
    return li[::-1]

li = [10, 20, 30, 40, 50]
print("Reversed list =", rev_list(li))
```

---

### **Question 18: Find the Second Largest Number in a List**

```python
def second_largest(li):
    unique_li = list(set(li))
    unique_li.sort()
    return unique_li[-2] if len(unique_li) >= 2 else None

li = [10, 20, 40, 30, 50]
print("Second largest =", second_largest(li))
```

---

### **Question 19: Return Only Even Numbers from a List**

```python
def even_list(li):
    return [i for i in li if i % 2 == 0]

li = [10, 1, 11, 30, 5, 7, 12]
print("Even list =", even_list(li))
```

---

### **Question 20: Check if All Characters in a String are Unique**

```python
def all_unique(s):
    return len(set(s)) == len(s)

s = input("Enter a string: ")
if all_unique(s):
    print("All characters are unique.")
else:
    print("Characters are not unique.")
```

---

### **Question 21: Calculate the Greatest Common Divisor (GCD) of Two Numbers**

```python
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

a = int(input("Enter value of a: "))
b = int(input("Enter value of b: "))
print("GCD =", gcd(a, b))
```

---

### **Question 22: Find the Least Common Multiple (LCM) of Two Numbers**

```python
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def lcm(a, b):
    return (a * b) // gcd(a, b)

a = int(input("Enter value of a: "))
b = int(input("Enter value of b: "))
print("LCM =", lcm(a, b))
```

---

### **Question 23: Remove Duplicates from a List**

```python
def remove_dupl(li):
    return list(set(li))

li = [10, 20, 30, 40, 40, 50, 70, 70, 70, 8, 8, 9, 10, 50]
print("List without duplicates =", remove_dupl(li))
```

---

### **Question 24: Compute the Factorial of a Number Recursively**

```python
def fact(num):
    if num < 0:
        return None
    return 1 if num == 0 else num * fact(num - 1)

num = int(input("Enter any number: "))
print("Factorial =", fact(num))
```

---

### **Question 25: Check if a Number is an Armstrong Number**

```python
def armstrong_num(num):
    n = len(str(num))
    return num == sum(int(digit) ** n for digit in str(num))

num = int(input("Enter a number: "))
print("Is Armstrong:", armstrong_num(num))
```

---

### **Question 26: Return All Prime Numbers Up to n**

```python
def prime_upto_n(n):
    primes = []
    for num in range(2, n + 1):
        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):
            primes.append(num)
    return primes

n = int(input("Enter a number: "))
print(f"Prime numbers up to {n}:", prime_upto_n(n))
```

---

### **Question 27: Return the Longest Word in a Sentence**

```python
def longest_word(sentence):
    words = sentence.split()
    return max(words, key=len)

sentence = input("Enter a sentence: ")
print("Longest word:", longest_word(sentence))
```

---

### **Question 28: (Missing)**

*Note: Question 28 is missing from the provided list.*

---

### **Question 29: Flatten a Nested List**

```python
def flatten_list(lst):
    result = []
    for item in lst:
        if isinstance(item, list):
            result.extend(flatten_list(item))
        else:
            result.append(item)
    return result

nested = [1, [2, [3, 4], 5], 6]
print(flatten_list(nested))
```

---

### **Question 30: Check if a List is Sorted**

```python
def is_sorted(lst):
    return lst == sorted(lst)

lst = [90, 80, 70, 60, 50, 40, 30, 20, 10]
print("Is Sorted:", is_sorted(lst))
```

---

### **Question 31: Merge Two Sorted Lists into One Sorted List**

```python
def merge_sorted_lists(list1, list2):
    return sorted(list1 + list2)

a = [1, 3, 5]
b = [2, 4, 6]
print(merge_sorted_lists(a, b))
```

---

### **Question 32: Find the Most Frequent Element in a List**

```python
def most_frequent(lst):
    return max(set(lst), key=lst.count)

numbers = [1, 3, 2, 3, 4, 3, 5]
print(most_frequent(numbers))
```

---

###

---

### **Question 33: Generate a Random Password**

```python
import random
import string

def generate_password(length=8):
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(characters) for _ in range(length))

print("Generated password:", generate_password(12))
```

---

### **Question 34: Calculate the Power of a Number Using Recursion**

```python
def power(base, exponent):
    if exponent == 0:
        return 1
    return base * power(base, exponent - 1)

print("2^5 =", power(2, 5))
```

---

### **Question 35: Convert a Number to Binary**

```python
def to_binary(num):
    return bin(num)[2:]

print("Binary of 13 =", to_binary(13))
```

---

### **Question 36: Find All Factors of a Number**

```python
def factors(num):
    return [i for i in range(1, num + 1) if num % i == 0]

print("Factors of 28:", factors(28))
```

---

### **Question 37: Return the Median of a List**

```python
def median(lst):
    lst = sorted(lst)
    n = len(lst)
    mid = n // 2
    if n % 2 == 0:
        return (lst[mid - 1] + lst[mid]) / 2
    else:
        return lst[mid]

print("Median:", median([7, 1, 3, 4, 2]))
```

---

### **Question 38: Find the Intersection of Two Lists**

```python
def intersection(list1, list2):
    return list(set(list1) & set(list2))

a = [1, 2, 3, 4, 5]
b = [4, 5, 6, 7]
print("Intersection:", intersection(a, b))
```

---

### **Question 39: Check if Two Strings are Anagrams**

```python
def are_anagrams(s1, s2):
    return sorted(s1) == sorted(s2)

print("Are anagrams:", are_anagrams("listen", "silent"))
```

---

### **Question 40: Get All Substrings of a String**

```python
def substrings(s):
    return [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)]

print("Substrings of 'abc':", substrings("abc"))
```

---

### **Question 41: Convert Roman Numerals to Integer**

```python
def roman_to_int(s):
    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    prev = 0
    for c in reversed(s):
        curr = roman[c]
        if curr < prev:
            total -= curr
        else:
            total += curr
        prev = curr
    return total

print("Roman 'IX' =", roman_to_int("IX"))
```

---

### **Question 42: Convert Integer to Roman Numerals**

```python
def int_to_roman(num):
    val = [
        (1000, "M"), (900, "CM"), (500, "D"), (400, "CD"),
        (100, "C"), (90, "XC"), (50, "L"), (40, "XL"),
        (10, "X"), (9, "IX"), (5, "V"), (4, "IV"), (1, "I")
    ]
    res = ""
    for (n, roman) in val:
        while num >= n:
            res += roman
            num -= n
    return res

print("Integer 9 in Roman =", int_to_roman(9))
```

---

### **Question 43: Find the First Non-Repeated Character in a String**

```python
def first_non_repeated(s):
    for char in s:
        if s.count(char) == 1:
            return char
    return None

print("First non-repeated character:", first_non_repeated("swiss"))
```

---

### **Question 44: Count the Number of Words in a Sentence**

```python
def word_count(sentence):
    return len(sentence.split())

print("Word count:", word_count("This is a test sentence"))
```

---

### **Question 45: Convert a Sentence to Title Case**

```python
def to_title_case(sentence):
    return sentence.title()

print("Title Case:", to_title_case("this is a sample sentence"))
```

---

### **Question 46: Check if a List is a Palindrome**

```python
def is_list_palindrome(lst):
    return lst == lst[::-1]

print("Is palindrome:", is_list_palindrome([1, 2, 3, 2, 1]))
```

---

### **Question 47: Get the Difference Between Two Lists**

```python
def list_diff(list1, list2):
    return list(set(list1) - set(list2))

print("Difference:", list_diff([1, 2, 3, 4], [3, 4, 5]))
```

---

### **Question 48: Implement a Simple Calculator**

```python
def calculator(a, b, op):
    if op == '+': return a + b
    elif op == '-': return a - b
    elif op == '*': return a * b
    elif op == '/': return a / b if b != 0 else "Division by zero"
    else: return "Invalid operation"

print("Result:", calculator(10, 5, '+'))
```

---

### **Question 49: Convert a List to a String**

```python
def list_to_string(lst):
    return ''.join(str(i) for i in lst)

print("String from list:", list_to_string([1, 2, 3, 4]))
```

---

### **Question 50: Check Whether a String Contains a Substring**

```python
def has_substring(string, substring):
    return substring in string

print("Contains substring:", has_substring("hello world", "world"))
```
